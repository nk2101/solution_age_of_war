class Unit {
  constructor(type, count) {
    this.type = type;
    this.count = count;
  }

  isStrongerThan(opponent) {
    return this.count > opponent.count;
  }

  isEqualStrength(opponent) {
    return this.count === opponent.count;
  }
}

class Platoon {
  constructor(units) {
    this.units = units; 
  }

  static stringSplitter(platoonString) {
    const unitStrings = platoonString.split(";");
    const units = unitStrings.map((unitString) => {
      const [type, count] = unitString.split("#");
      return new Unit(type, parseInt(count));
    });
    return new Platoon(units);
  }
}

class Battle {
  constructor(advOfBattles) {
    this.advOfBattles = advOfBattles;
  }

  battleResult(unit1, unit2) {
    if (this.isAdvantage(unit1.type, unit2.type)) {
      if (unit1.count * 2 > unit2.count) return "win";
      if (unit1.count * 2 === unit2.count) return "draw";
      return "loss";
    } else {
      if (unit1.isStrongerThan(unit2)) return "win";
      if (unit1.isEqualStrength(unit2)) return "draw";
      return "loss";
    }
  }

  isAdvantage(type1, type2) {
    return this.advOfBattles[type1]?.includes(type2);
  }
  
  conduct(platoon1, platoon2) {
    let wins = 0;
    let arrangements = [];
    
    const length = Math.min(platoon1.units.length, platoon2.units.length);

    for (let i = 0; i < length; i++) {
      const unit1 = platoon1.units[i];
      const unit2 = platoon2.units[i];

      const result = this.battleResult(unit1, unit2);
      arrangements.push(`${unit1.type}#${unit2.count}`);
      
      if (result === "win") {
        wins++;
      }
    }

    return {
      wins,
      arrangements,
    };
  }
}

const testBattle = () => {
  const ownPlatoonString =
    "Spearmen#10;Militia#30;FootArcher#20;LightCavalry#1000;HeavyCavalry#120";
  const oppPlatoonString =
    "Militia#10;Spearmen#10;FootArcher#1000;LightCavalry#120;CavalryArcher#100";

  const advOfBattles = {
    Militia: ["Spearmen", "LightCavalry"],
    Spearmen: ["LightCavalry", "HeavyCavalry"],
    LightCavalry: ["FootArcher", "CavalryArcher"],
    HeavyCavalry: ["Militia", "FootArcher", "LightCavalry"],
    CavalryArcher: ["Spearmen", "HeavyCavalry"],
    FootArcher: ["Militia", "CavalryArcher"],
  };

  const ownPlatoon = Platoon.stringSplitter(ownPlatoonString);
  const oppPlatoon = Platoon.stringSplitter(oppPlatoonString);

  const battle = new Battle(advOfBattles);

  const result = battle.conduct(ownPlatoon, oppPlatoon);

  console.log("Arrangements: ", result.arrangements.toString());
  console.log("Total Wins: ", result.wins);
};

testBattle();
